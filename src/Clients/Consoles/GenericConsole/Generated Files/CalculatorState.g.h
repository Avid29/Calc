// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200703.9

#pragma once
#include "winrt/Calculator.h"
namespace winrt::Calculator::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) CalculatorState_base : implements<D, Calculator::CalculatorState, I...>
    {
        using base_type = CalculatorState_base;
        using class_type = Calculator::CalculatorState;
        using implements_type = typename CalculatorState_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"Calculator.CalculatorState";
        }
    };
}
namespace winrt::Calculator::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CalculatorStateT : implements<D, Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = Calculator::CalculatorState;

        hstring GetRuntimeClassName() const
        {
            return L"Calculator.CalculatorState";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CALCULATORSTATE_XAML_G_H) || __has_include("CalculatorState.xaml.g.h")
#include "CalculatorState.xaml.g.h"
#else

namespace winrt::Calculator::implementation
{
    template <typename D, typename... I>
    using CalculatorStateT = CalculatorState_base<D, I...>;
}

#endif
