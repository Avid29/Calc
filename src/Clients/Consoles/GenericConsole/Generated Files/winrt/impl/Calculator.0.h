// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200703.9

#ifndef WINRT_Calculator_0_H
#define WINRT_Calculator_0_H
WINRT_EXPORT namespace winrt::Calculator
{
    struct ICalculatorState;
    struct CalculatorState;
}
namespace winrt::impl
{
    template <> struct category<Calculator::ICalculatorState>{ using type = interface_category; };
    template <> struct category<Calculator::CalculatorState>{ using type = class_category; };
    template <> inline constexpr auto& name_v<Calculator::CalculatorState> = L"Calculator.CalculatorState";
    template <> inline constexpr auto& name_v<Calculator::ICalculatorState> = L"Calculator.ICalculatorState";
    template <> inline constexpr guid guid_v<Calculator::ICalculatorState>{ 0x260CA439,0x4D37,0x55EA,{ 0xA7,0xB4,0x75,0x2C,0x7C,0xFB,0x70,0x0B } }; // 260CA439-4D37-55EA-A7B4-752C7CFB700B
    template <> struct default_interface<Calculator::CalculatorState>{ using type = Calculator::ICalculatorState; };
    template <> struct abi<Calculator::ICalculatorState>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Clear() noexcept = 0;
            virtual int32_t __stdcall ParseNextChar(char16_t, bool*) noexcept = 0;
            virtual int32_t __stdcall Simplify(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Calculator_ICalculatorState
    {
        WINRT_IMPL_AUTO(void) Clear() const;
        WINRT_IMPL_AUTO(bool) ParseNextChar(char16_t c) const;
        WINRT_IMPL_AUTO(hstring) Simplify() const;
    };
    template <> struct consume<Calculator::ICalculatorState>
    {
        template <typename D> using type = consume_Calculator_ICalculatorState<D>;
    };
}
#endif
